{"version":3,"file":"vue3-histogram-slider.esm10.js","sources":["../node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/bin.js"],"sourcesContent":["import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    // Be careful not to mutate an array owned by the user!\n    var m = tz.length, a = 0, b = m;\n    while (tz[a] <= x0) ++a;\n    while (tz[b - 1] > x1) --b;\n    if (a || b < m) tz = tz.slice(a, b), m = b - a;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : constant(Array.isArray(_) ? slice.call(_) : _), histogram) : threshold;\n  };\n\n  return histogram;\n}\n"],"names":["bin","value","identity","domain","extent","threshold","sturges","histogram","data","i","n","x","step","values","xz","x0","x1","tz","max","tn","nice","ticks","tickIncrement","m","b","bins","j","bisect","_","constant","slice"],"mappings":";;;;;;;;AASe,SAASA,IAAM;AAC5B,MAAIC,IAAQC,GACRC,IAASC,GACTC,IAAYC;AAEhB,WAASC,EAAUC,GAAM;AACvB,IAAK,MAAM,QAAQA,CAAI,MAAGA,IAAO,MAAM,KAAKA,CAAI;AAEhD,QAAIC,GACAC,IAAIF,EAAK,QACTG,GACAC,GACAC,IAAS,IAAI,MAAMH,CAAC;AAExB,SAAKD,IAAI,GAAGA,IAAIC,GAAG,EAAED;AACnB,MAAAI,EAAOJ,CAAC,IAAIR,EAAMO,EAAKC,CAAC,GAAGA,GAAGD,CAAI;AAGpC,QAAIM,IAAKX,EAAOU,CAAM,GAClBE,IAAKD,EAAG,CAAC,GACTE,IAAKF,EAAG,CAAC,GACTG,IAAKZ,EAAUQ,GAAQE,GAAIC,CAAE;AAIjC,QAAI,CAAC,MAAM,QAAQC,CAAE,GAAG;AACtB,YAAMC,IAAMF,GAAIG,IAAK,CAACF;AAgBtB,UAfId,MAAWC,MAAQ,CAACW,GAAIC,CAAE,IAAII,EAAKL,GAAIC,GAAIG,CAAE,IACjDF,IAAKI,EAAMN,GAAIC,GAAIG,CAAE,GAKjBF,EAAG,CAAC,KAAKF,MAAIH,IAAOU,EAAcP,GAAIC,GAAIG,CAAE,IAS5CF,EAAGA,EAAG,SAAS,CAAC,KAAKD;AACvB,YAAIE,KAAOF,KAAMb,MAAWC,GAAQ;AAClC,gBAAMQ,IAAOU,EAAcP,GAAIC,GAAIG,CAAE;AACrC,UAAI,SAASP,CAAI,MACXA,IAAO,IACTI,KAAM,KAAK,MAAMA,IAAKJ,CAAI,IAAI,KAAKA,IAC1BA,IAAO,MAChBI,KAAM,KAAK,KAAKA,IAAK,CAACJ,CAAI,IAAI,KAAK,CAACA;AAAA,QAGlD;AACU,UAAAK,EAAG,IAAG;AAAA,IAGX;AAKD,aADIM,IAAIN,EAAG,QAAQ,IAAI,GAAGO,IAAID,GACvBN,EAAG,CAAC,KAAKF,IAAI,GAAE;AACtB,WAAOE,EAAGO,IAAI,CAAC,IAAIR,IAAI,GAAEQ;AACzB,KAAI,KAAKA,IAAID,OAAGN,IAAKA,EAAG,MAAM,GAAGO,CAAC,GAAGD,IAAIC,IAAI;AAE7C,QAAIC,IAAO,IAAI,MAAMF,IAAI,CAAC,GACtBvB;AAGJ,SAAKS,IAAI,GAAGA,KAAKc,GAAG,EAAEd;AACpB,MAAAT,IAAMyB,EAAKhB,CAAC,IAAI,IAChBT,EAAI,KAAKS,IAAI,IAAIQ,EAAGR,IAAI,CAAC,IAAIM,GAC7Bf,EAAI,KAAKS,IAAIc,IAAIN,EAAGR,CAAC,IAAIO;AAI3B,QAAI,SAASJ,CAAI;AACf,UAAIA,IAAO;AACT,aAAKH,IAAI,GAAGA,IAAIC,GAAG,EAAED;AACnB,WAAKE,IAAIE,EAAOJ,CAAC,MAAM,QAAQM,KAAMJ,KAAKA,KAAKK,KAC7CS,EAAK,KAAK,IAAIF,GAAG,KAAK,OAAOZ,IAAII,KAAMH,CAAI,CAAC,CAAC,EAAE,KAAKJ,EAAKC,CAAC,CAAC;AAAA,eAGtDG,IAAO;AAChB,aAAKH,IAAI,GAAGA,IAAIC,GAAG,EAAED;AACnB,eAAKE,IAAIE,EAAOJ,CAAC,MAAM,QAAQM,KAAMJ,KAAKA,KAAKK,GAAI;AACjD,kBAAMU,IAAI,KAAK,OAAOX,IAAKJ,KAAKC,CAAI;AACpC,YAAAa,EAAK,KAAK,IAAIF,GAAGG,KAAKT,EAAGS,CAAC,KAAKf,EAAE,CAAC,EAAE,KAAKH,EAAKC,CAAC,CAAC;AAAA,UACjD;AAAA;AAAA;AAIL,WAAKA,IAAI,GAAGA,IAAIC,GAAG,EAAED;AACnB,SAAKE,IAAIE,EAAOJ,CAAC,MAAM,QAAQM,KAAMJ,KAAKA,KAAKK,KAC7CS,EAAKE,EAAOV,GAAIN,GAAG,GAAGY,CAAC,CAAC,EAAE,KAAKf,EAAKC,CAAC,CAAC;AAK5C,WAAOgB;AAAA,EACR;AAED,SAAAlB,EAAU,QAAQ,SAASqB,GAAG;AAC5B,WAAO,UAAU,UAAU3B,IAAQ,OAAO2B,KAAM,aAAaA,IAAIC,EAASD,CAAC,GAAGrB,KAAaN;AAAA,EAC/F,GAEEM,EAAU,SAAS,SAASqB,GAAG;AAC7B,WAAO,UAAU,UAAUzB,IAAS,OAAOyB,KAAM,aAAaA,IAAIC,EAAS,CAACD,EAAE,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,GAAGrB,KAAaJ;AAAA,EAC3G,GAEEI,EAAU,aAAa,SAASqB,GAAG;AACjC,WAAO,UAAU,UAAUvB,IAAY,OAAOuB,KAAM,aAAaA,IAAIC,EAAS,MAAM,QAAQD,CAAC,IAAIE,EAAM,KAAKF,CAAC,IAAIA,CAAC,GAAGrB,KAAaF;AAAA,EACtI,GAESE;AACT;","x_google_ignoreList":[0]}