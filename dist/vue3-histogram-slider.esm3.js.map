{"version":3,"file":"vue3-histogram-slider.esm3.js","sources":["../src/lib/HistogramSlider.vue"],"sourcesContent":["<template>\n  <div class=\"vue-histogram-slider-wrapper\">\n    <svg ref=\"svgElementRef\" class=\"vue-histogram\"></svg>\n    <VueSlider\n      class=\"vue-slider\"\n      v-model=\"sliderValue\"\n      :min=\"minValue\"\n      :max=\"maxValue\"\n      :step=\"step\"\n      :dot-size=\"handleSize\"\n      :width=\"svgWidth\"\n      :height=\"16\"\n      :marks=\"marks\"\n      :lazy=\"false\"\n      :process-style=\"processStyle\"\n      :tooltip-style=\"tooltipStyle\"\n      :tooltip=\"tooltip\"\n      :tooltip-placement=\"['bottom']\"\n      :tooltip-formatter=\"prettify\"\n      :duration=\"0\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, watch, nextTick, onBeforeUnmount } from 'vue'\nimport { min, max, bin  } from 'd3-array'\nimport type { Bin } from 'd3-array'\nimport { scaleLinear } from 'd3-scale'\nimport { select } from 'd3-selection'\nimport type { Selection } from 'd3-selection'\nimport VueSlider, { type MarkOption, type Marks, type Styles } from 'vue-3-slider-component'\nimport { watchDebounced } from '@vueuse/core'\n\ntype MarkStyle = Omit<MarkOption, 'label'>\n\ntype DebouncedOptions = {\n  wait?: number\n  maxWait?: number\n}\n\ninterface Props {\n  data: number[]\n  min?: number\n  max?: number\n  step?: number\n  barWidth?: number\n  barGap?: number\n  barRadius?: number\n  holderColor?: string\n  colors?: string[]\n  updateColorOnChange?: boolean\n  handleSize?: number\n  grid?: boolean\n  gridNum?: number\n  prettify?: (value: number) => string\n  labelStyle?: Styles\n  markStyle?: MarkStyle\n  processStyle?: Styles\n  tooltipStyle?: Styles\n  histSliderGap?: number \n  tooltip?: 'none' | 'always' | 'focus' | 'hover' | 'active'\n  debounced?: boolean | {\n    wait?: number\n    maxWait?: number\n  }\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  step: 1,\n  barWidth: 6,\n  barGap: 5,\n  barRadius: 4,\n  holderColor: '#dee4ec',\n  updateColorOnChange: true,\n  handleSize: 26,\n  grid: true,\n  gridNum: 4,\n  histSliderGap: 0,\n  tooltip: 'always',\n  colors: () => [],\n  prettify: (value: number) => value.toString(),\n  labelStyle: () => ({\n    color: '#0091ff',\n    fontFamily: 'Arial, sans-serif',\n    fontSize: 12,\n  }),\n  markStyle: () => ({\n    labelStyle: {\n      color: 'silver',\n      fontFamily: 'Arial, sans-serif',\n      fontSize: 12,\n    },\n    labelActiveStyle: {\n      color: '#0091ff',\n    },\n  }),\n  processStyle: () => ({\n    backgroundColor: '#0091ff',\n  }),\n  tooltipStyle: () => ({\n    backgroundColor: '#0091ff',\n    color: '#fff',\n    fontFamily: 'Arial, sans-serif',\n    fontSize: 12,\n  }),\n  debounced: false,\n})\n\nconst debouncedOptions = computed<Required<DebouncedOptions>>(() => {\n  if (typeof props.debounced === 'object') {\n    return {\n      wait: props.debounced.wait ?? 0,\n      maxWait: props.debounced.maxWait ?? 0,\n    }\n  }\n\n  return {\n    wait: 0,\n    maxWait: 0,\n  }\n})\n\nconst svgElementRef = ref<SVGSVGElement | null>(null)\n\nconst awaitingDebouncedUpdate = ref(false)\nconst modelValue = defineModel<number>({ required: true })\nconst internalModelValue = ref(modelValue.value)\n\nwatch(modelValue, () => {\n  if (awaitingDebouncedUpdate.value) return\n  internalModelValue.value = modelValue.value\n})\n\nwatchDebounced(internalModelValue, (value) => {\n  awaitingDebouncedUpdate.value = false\n  modelValue.value = value\n}, debouncedOptions.value)\n\nconst sliderValue = computed({\n  get: () => Math.max(minValue.value, Math.min(maxValue.value, internalModelValue.value)),\n  set: (value: number) => {\n    awaitingDebouncedUpdate.value = true\n    internalModelValue.value = value\n  },\n})\n\nconst minValue = computed(() => props.min ?? min(props.data) ?? 0)\nconst maxValue = computed(() => props.max ?? max(props.data) ?? 100)\n\nconst svgWidth = ref(0)\nconst svgHeight = ref(0)\n\nconst marks = computed<Marks | undefined>(() => {\n  if (props.grid) {\n    const count = props.gridNum\n    const step = (maxValue.value - minValue.value) / count\n    const result: Marks = {}\n    for (let i = 0; i <= count; i++) {\n      const value = minValue.value + step * i\n      result[Math.round(value)] = {\n        ...props.markStyle,\n        label: props.prettify(value),\n      }\n    }\n    return result\n  }\n  return undefined\n})\n\nlet hist: Selection<SVGGElement, unknown, null, undefined> | null = null\n\nconst colorScale = computed<(value: number) => string>(() => {\n  if (props.colors.length > 0) {\n    return scaleLinear<string>()\n      .domain([minValue.value, maxValue.value])\n      .range(props.colors) satisfies (value: number) => string\n  }\n\n  return scaleLinear<string>()\n      .domain([minValue.value, maxValue.value])\n      .range(['#4facfe', '#00f2fe']) satisfies (value: number) => string\n})\n\nconst xScale = computed(() => {\n  const width = svgWidth.value\n  return scaleLinear()\n    .domain([minValue.value, maxValue.value])\n    .range([0, width])\n    .clamp(true)\n})\n\nconst histogramData = computed(() => {\n  const binsGenerator = bin()\n    .domain(xScale.value.domain() as [number, number])\n    .thresholds(Math.floor(svgWidth.value / (props.barWidth + props.barGap)))\n\n  return binsGenerator(props.data)\n})\n\nconst yScale = computed(() => {\n  const height = svgHeight.value\n  const maxCount = max(histogramData.value, (d) => d.length) ?? 0\n  return scaleLinear()\n    .range([height, 0])\n    .domain([0, maxCount])\n})\n\nfunction renderHistogram() {\n  if (!svgElementRef.value) return\n\n  // Update svgWidth and svgHeight\n  svgWidth.value = svgElementRef.value.clientWidth\n  svgHeight.value = svgElementRef.value.clientHeight\n\n  // Remove previous content\n  const svg = select(svgElementRef.value)\n  svg.selectAll('*').remove()\n\n  hist = svg.append('g').attr('class', 'histogram')\n\n  hist\n    .selectAll('rect')\n    .data(histogramData.value)\n    .enter()\n    .append('rect')\n    .attr('x', (d) => xScale.value(d.x0!))\n    .attr('y', (d) => yScale.value(d.length))\n    .attr('width', props.barWidth)\n    .attr('height', (d) => svgHeight.value - yScale.value(d.length))\n    .attr('rx', props.barRadius)\n    .attr('fill', (d) => getBarColor(d.x0!))\n}\n\nfunction updateHistogram() {\n  if (!hist) return\n\n  hist\n    .selectAll('rect')\n    .attr('fill', (d) => getBarColor((d as Bin<number, number>).x0!))\n}\n\nwatch(modelValue, () => {\n  updateHistogram()\n})\n\nfunction getBarColor(binValue: number): string {\n  return binValue < sliderValue.value ? colorScale.value(binValue) : props.holderColor\n}\n\nonMounted(async () => {\n  await nextTick()\n  modelValue.value = minValue.value\n  renderHistogram()\n})\n\nwatch(sliderValue, () => {\n  updateHistogram()\n})\n\nwatch(\n  () => [\n    props.data,\n    props.min,\n    props.max,\n    props.barWidth,\n    props.barGap,\n    props.barRadius,\n    props.colors,\n    props.holderColor,\n    colorScale.value, // Watch processStyle backgroundColor\n  ],\n  () => {\n    renderHistogram()\n  }\n)\n\nlet resizeObserver: ResizeObserver\n\nonMounted(() => {\n  if (svgElementRef.value) {\n    svgWidth.value = svgElementRef.value.clientWidth\n    svgHeight.value = svgElementRef.value.clientHeight\n\n    resizeObserver = new ResizeObserver(() => {\n      svgWidth.value = svgElementRef.value?.clientWidth ?? 0\n      svgHeight.value = svgElementRef.value?.clientHeight ?? 0\n      renderHistogram()\n    })\n    resizeObserver.observe(svgElementRef.value)\n  }\n})\n\nonBeforeUnmount(() => {\n  if (resizeObserver && svgElementRef.value) {\n    resizeObserver.unobserve(svgElementRef.value)\n  }\n})\n\nconst histSliderGapOffset= computed(() => {\n  return `${props.histSliderGap}px`\n})\n</script>\n\n<style scoped>\n.vue-histogram-slider-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.vue-histogram {\n  pointer-events: none;\n}\n\n.vue-slider {\n  flex-shrink: 0;\n  margin-top: v-bind(histSliderGapOffset);\n}\n</style>\n"],"names":["props","__props","debouncedOptions","computed","svgElementRef","ref","awaitingDebouncedUpdate","modelValue","_useModel","internalModelValue","watch","watchDebounced","value","sliderValue","minValue","maxValue","min","max","svgWidth","svgHeight","marks","count","step","result","i","hist","colorScale","scaleLinear","xScale","width","histogramData","bin","yScale","height","maxCount","d","renderHistogram","svg","select","getBarColor","updateHistogram","binValue","onMounted","nextTick","resizeObserver","_a","_b","onBeforeUnmount","histSliderGapOffset"],"mappings":"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"}