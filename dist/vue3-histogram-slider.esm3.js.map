{"version":3,"file":"vue3-histogram-slider.esm3.js","sources":["../src/lib/HistogramSlider.vue"],"sourcesContent":["<template>\n  <div class=\"vue-histogram-slider-wrapper\">\n    <svg ref=\"svgElementRef\" class=\"vue-histogram\"></svg>\n    <VueSlider\n      class=\"vue-slider\"\n      v-model=\"sliderValue\"\n      :min=\"minValue\"\n      :max=\"maxValue\"\n      :step=\"step\"\n      :dot-size=\"handleSize\"\n      :width=\"svgWidth\"\n      :height=\"16\"\n      :marks=\"marks\"\n      :lazy=\"false\"\n      :process-style=\"processStyle\"\n      :tooltip-style=\"tooltipStyle\"\n      :tooltip=\"'always'\"\n      :tooltip-placement=\"['bottom']\"\n      :tooltip-formatter=\"prettify\"\n      @change=\"onChange\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, watch, nextTick, onBeforeUnmount } from 'vue'\nimport * as d3 from 'd3'\nimport VueSlider, { type MarkOption, type Marks, type Styles } from 'vue-slider-component'\nimport 'vue-slider-component/theme/antd.css'\n\nexport type MarkStyle = Omit<MarkOption, 'label'>\n\ninterface Props {\n  data: number[]\n  min?: number\n  max?: number\n  step?: number\n  barWidth?: number\n  barGap?: number\n  barRadius?: number\n  holderColor?: string\n  colors?: string[]\n  updateColorOnChange?: boolean\n  handleSize?: number\n  grid?: boolean\n  gridNum?: number\n  prettify?: (value: number) => string\n  labelStyle?: Styles\n  markStyle?: MarkStyle\n  processStyle?: Styles\n  tooltipStyle?: Styles\n  histSliderGap?: number \n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  step: 1,\n  barWidth: 6,\n  barGap: 5,\n  barRadius: 4,\n  holderColor: '#dee4ec',\n  updateColorOnChange: true,\n  handleSize: 26,\n  grid: true,\n  gridNum: 4,\n  histSliderGap: 0,\n  colors: () => [],\n  prettify: (value: number) => value.toString(),\n  labelStyle: () => ({\n    color: '#0091ff',\n    fontFamily: 'Arial, sans-serif',\n    fontSize: 12,\n  }),\n  markStyle: () => ({\n    labelStyle: {\n      color: 'silver',\n      fontFamily: 'Arial, sans-serif',\n      fontSize: 12,\n    },\n    labelActiveStyle: {\n      color: '#0091ff',\n    },\n  }),\n  processStyle: () => ({\n    backgroundColor: '#0091ff',\n  }),\n  tooltipStyle: () => ({\n    backgroundColor: '#0091ff',\n    color: '#fff',\n    fontFamily: 'Arial, sans-serif',\n    fontSize: 12,\n  }),\n})\n\nconst svgElementRef = ref<SVGSVGElement | null>(null)\n\nconst modelValue = defineModel<number>({ required: true })\nconst sliderValue = computed({\n  get: () => Math.max(minValue.value, Math.min(maxValue.value, modelValue.value)),\n  set: (value: number) => (modelValue.value = value),\n})\n\nconst minValue = computed(() => props.min ?? d3.min(props.data) ?? 0)\nconst maxValue = computed(() => props.max ?? d3.max(props.data) ?? 100)\n\nconst svgWidth = ref(0)\nconst svgHeight = ref(0)\n\nconst marks = computed<Marks | undefined>(() => {\n  if (props.grid) {\n    const count = props.gridNum\n    const step = (maxValue.value - minValue.value) / count\n    const result: Marks = {}\n    for (let i = 0; i <= count; i++) {\n      const value = minValue.value + step * i\n      result[Math.round(value)] = {\n        ...props.markStyle,\n        label: props.prettify(value),\n      }\n    }\n    return result\n  }\n  return undefined\n})\n\nlet hist: d3.Selection<SVGGElement, unknown, null, undefined> | null = null\n\nconst colorScale = computed<(value: number) => string>(() => {\n  if (props.colors.length > 0) {\n    return d3\n      .scaleLinear<string>()\n      .domain([minValue.value, maxValue.value])\n      .range(props.colors) satisfies (value: number) => string\n  }\n\n  return d3\n      .scaleLinear<string>()\n      .domain([minValue.value, maxValue.value])\n      .range(['#4facfe', '#00f2fe']) satisfies (value: number) => string\n})\n\nconst xScale = computed(() => {\n  const width = svgWidth.value\n  return d3\n    .scaleLinear()\n    .domain([minValue.value, maxValue.value])\n    .range([0, width])\n    .clamp(true)\n})\n\nconst histogramData = computed(() => {\n  const binsGenerator = d3\n    .bin()\n    .domain(xScale.value.domain() as [number, number])\n    .thresholds(Math.floor(svgWidth.value / (props.barWidth + props.barGap)))\n\n  return binsGenerator(props.data)\n})\n\nconst yScale = computed(() => {\n  const height = svgHeight.value\n  const maxCount = d3.max(histogramData.value, (d) => d.length) ?? 0\n  return d3\n    .scaleLinear()\n    .range([height, 0])\n    .domain([0, maxCount])\n})\n\nfunction renderHistogram() {\n  if (!svgElementRef.value) return\n\n  // Update svgWidth and svgHeight\n  svgWidth.value = svgElementRef.value.clientWidth\n  svgHeight.value = svgElementRef.value.clientHeight\n\n  // Remove previous content\n  const svg = d3.select(svgElementRef.value)\n  svg.selectAll('*').remove()\n\n  hist = svg.append('g').attr('class', 'histogram')\n\n  hist\n    .selectAll('rect')\n    .data(histogramData.value)\n    .enter()\n    .append('rect')\n    .attr('x', (d) => xScale.value(d.x0!))\n    .attr('y', (d) => yScale.value(d.length))\n    .attr('width', props.barWidth)\n    .attr('height', (d) => svgHeight.value - yScale.value(d.length))\n    .attr('rx', props.barRadius)\n    .attr('fill', (d) => getBarColor(d.x0!))\n}\n\nfunction updateHistogram() {\n  if (!hist) return\n\n  hist\n    .selectAll('rect')\n    .attr('fill', (d) => getBarColor((d as d3.Bin<number, number>).x0!))\n}\n\nfunction getBarColor(binValue: number): string {\n  return binValue < sliderValue.value ? colorScale.value(binValue) : props.holderColor\n}\n\nfunction onChange(value: number) {\n  if (props.updateColorOnChange) {\n    updateHistogram()\n  }\n}\n\nonMounted(async () => {\n  await nextTick()\n  modelValue.value = minValue.value\n  renderHistogram()\n})\n\nwatch(sliderValue, () => {\n  updateHistogram()\n})\n\nwatch(\n  () => [\n    props.data,\n    props.min,\n    props.max,\n    props.barWidth,\n    props.barGap,\n    props.barRadius,\n    props.colors,\n    props.holderColor,\n    colorScale.value, // Watch processStyle backgroundColor\n  ],\n  () => {\n    renderHistogram()\n  }\n)\n\nlet resizeObserver: ResizeObserver\n\nonMounted(() => {\n  if (svgElementRef.value) {\n    svgWidth.value = svgElementRef.value.clientWidth\n    svgHeight.value = svgElementRef.value.clientHeight\n\n    resizeObserver = new ResizeObserver(() => {\n      svgWidth.value = svgElementRef.value?.clientWidth ?? 0\n      svgHeight.value = svgElementRef.value?.clientHeight ?? 0\n      renderHistogram()\n    })\n    resizeObserver.observe(svgElementRef.value)\n  }\n})\n\nonBeforeUnmount(() => {\n  if (resizeObserver && svgElementRef.value) {\n    resizeObserver.unobserve(svgElementRef.value)\n  }\n})\n\nconst histSliderGapOffset= computed(() => {\n  return `${props.histSliderGap}px`\n})\n</script>\n\n<style scoped>\n.vue-histogram-slider-wrapper {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.vue-histogram {\n  pointer-events: none;\n}\n\n.vue-slider {\n  flex-shrink: 0;\n  margin-top: v-bind(histSliderGapOffset);\n}\n</style>\n"],"names":["props","__props","svgElementRef","ref","modelValue","_useModel","sliderValue","computed","minValue","maxValue","value","d3.min","d3.max","svgWidth","svgHeight","marks","count","step","result","i","hist","colorScale","d3.scaleLinear","xScale","width","histogramData","d3.bin","yScale","height","maxCount","d","renderHistogram","svg","d3.select","getBarColor","updateHistogram","binValue","onChange","onMounted","nextTick","watch","resizeObserver","_a","_b","onBeforeUnmount","histSliderGapOffset"],"mappings":"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"}